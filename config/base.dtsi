#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires https://github.com/urob/zmk-auto-layer module
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "zmk-helpers/helper.h"

#define XXX &none
#define ___ &trans

// layers
#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
#define SYS 4
#define MOUSE 5

// Behaviors Constants
#define TAPPING_TERM_MS 280
#define QUICK_TAP_MS 175
#define REQUIRE_PRIOR_IDLE_MS 150

// Combos Constants
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

#include "mouse.dtsi"

// ZMK Behaviors Configuration
&sk {
  release-after-ms = <900>;
  quick-release;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

&mt { 
  flavor = "tap-preferred";
  tapping-term-ms = <220>;
  quick-tap-ms = <220>;
  hold-trigger-key-positions = <0>;
};

// From: https://github.com/urob/zmk-config/
// num-word, requires PR https://github.com/zmkfirmware/zmk/pull/1451
// Adds arrows and shift to smart layer for more comfortable navigation/selection moves
&num_word {
  continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL RSHIFT LEFT RIGHT UP DOWN>;
};

&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

/* Mouse */

&mmv {
  acceleration-exponent = <1>;          // 1
  time-to-max-speed-ms = <500>;         // 300
  delay-ms = <0>;                       // 0
};

&msc {
  acceleration-exponent = <0>;          // 0
  time-to-max-speed-ms = <300>;         // 300
  delay-ms = <0>;                       // 0
};

&mmv_input_listener {
  warp {
    layers = <NAV>;
    input-processors = <&zip_xy_scaler 3 1>;
  };
  precision {
    layers = <FN>;
    input-processors = <&zip_xy_scaler 1 2>;
  };
};

/ {
  zip_scroll_scaler: zip_scroll_scaler {
    compatible = "zmk,input-processor-scaler";
    #input-processor-cells = <2>;
    type = <INPUT_EV_REL>;
    codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
    track-remainders;
  };
};

&msc_input_listener {
  warp {
    layers = <NAV>;
    input-processors = <&zip_scroll_scaler 2 1>;
  };
  precision {
    layers = <FN>;
    input-processors = <&zip_scroll_scaler 1 2>;
  };
};

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

#define SMART_NUM &smart_num NUM 0
#define MAGIC_SHIFT &magic_shift LSHFT 0

#define NAV_LEFT  &mt LG(LEFT) LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt LG(RIGHT) RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LG(UP) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LG(DOWN) DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LA(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LA(DEL) DEL   // Tap: del   | Long-tap: delete word fwd.

#define WIN_LEFT  &kp LC(LA(LG(LEFT)))
#define WIN_RIGHT  &kp LC(LA(LG(RIGHT)))

#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define DSK_PREV  &hmr LCTL LG(LC(LEFT)) // Previous desktop.
#define DSK_NEXT  &hmr LALT LG(LC(RIGHT)) // Next     desktop.
#define PIN_WIN   &kp LG(LC(LS(Q)))       // Pin window across desktops.
#define PIN_APP   &kp LG(LC(LS(A)))       // Pin application across desktops.
#define DSK_MGR   &kp LA(GRAVE)           // Desktop manager.

/ {
    behaviors {
      /omit-if-no-ref/ rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
      };
  
      /omit-if-no-ref/ scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
      };

      /*
      Home Row Mods

      - tap: &kp <PARAM_2>
      - hold: &kp <PARAM_1>

      Example: &hml LCMD T
      */
      /omit-if-no-ref/ hml: hrm_left {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms = <QUICK_TAP_MS>;
        require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
      };

      /omit-if-no-ref/ hmr: hrm_right {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_L THUMBS>;
        hold-trigger-on-release;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick-tap-ms = <QUICK_TAP_MS>;
        require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
      };

      /*
      - tap: sticky shift
      - double-tap: caps-word (shift + tap mod-morph)
      - hold: shift

      From: https://github.com/urob/zmk-config/
      */
      /omit-if-no-ref/ smart_shift: smart_shift {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&sk RSHFT>, <&caps_word>;
        mods = <(MOD_RSFT)>;
      };

      /*
      - tap: num-word
      - hold: &mo layer

      From: https://github.com/urob/zmk-config/
      */
      /omit-if-no-ref/ smart_num: smart_num {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        #binding-cells = <2>;
        bindings = <&mo>, <&num_dance>;
        tapping-term-ms = <TAPPING_TERM_MS>;
      };
      /*
      - tap: &sl NUM
      - tap x 2: &num_word

      From: https://github.com/urob/zmk-config/
      */
      /omit-if-no-ref/ num_dance: num_dance {
        compatible = "zmk,behavior-tap-dance";
        tapping-term-ms = <TAPPING_TERM_MS>;
        #binding-cells = <0>;
        bindings = <&sl NUM>, <&num_word NUM>;
      };

      // Smart-mouse, requires tri-state module.
      /omit-if-no-ref/ smart_mouse: smart_mouse {
        compatible = "zmk,behavior-tri-state";
        #binding-cells = <0>;
        bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
        ignored-key-positions = <LT1 LT2 LH0 LH1 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1>;
        ignored-layers = <MOUSE NAV FN>;
      };

      // Alt+Tab swapper, requires tri-state module.
      /omit-if-no-ref/ swapper: swapper {
        compatible = "zmk,behavior-tri-state";
        #binding-cells = <0>;
        bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;
      };

      /*
      - tap: reset keyboard
      - hold: enter bootloader mode
      */
      /omit-if-no-ref/ rst_boot: rst_boot {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        #binding-cells = <2>;
        bindings = <&bootloader>, <&sys_reset>;
        tapping-term-ms = <500>;
      };

      /* Magic-shift & auto-layers 
      - Tap: repeat after alpha, else sticky-shift |
      - Shift + tap / double-tap: caps-word 
      - Hold: shift.
      */
      /omit-if-no-ref/ shift_repeat: shift_repeat {
        compatible = "zmk,behavior-adaptive-key";
        #binding-cells = <0>;
        bindings = <&sk LSHFT>;
        repeat {
          trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
          bindings = <&key_repeat>;
          max-prior-idle-ms = <1200>;
          strict-modifiers;
        };
      };
      /omit-if-no-ref/ magic_shift_tap: magic_shift_tap {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&shift_repeat>, <&caps_word>;
        mods = <(MOD_LSFT)>;
      };
      /omit-if-no-ref/ magic_shift: magic_shift {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced"; 
        #binding-cells = <2>;
        bindings = <&kp>, <&magic_shift_tap>;
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
      };

      /*
      - tab: space
      - shift + tab: "raycast" > space > sticky shift
      - hold: fn layer
      */
      /omit-if-no-ref/ lt_spc: lt_spc {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced"; 
        #binding-cells = <2>;
        bindings = <&mo>, <&spc_morph>;
        tapping-term-ms = <200>;
        quick-tap-ms = <QUICK_TAP_MS>;
      };
      /omit-if-no-ref/ spc_morph: spc_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&kp LC(LG(SPACE))>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      /*
      - tap: backspace
      - shift + tap: delete
      - shift + hold: repeat delete

      From: https://zmk.dev/docs/behaviors/mod-morph#advanced-configuration
      */
      /omit-if-no-ref/ bs_del: bs_del {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&kp DELETE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      /omit-if-no-ref/ esc_grave: esc_grave {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp ESC>, <&kp GRAVE>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
      };

      /*
      - tap: comma
      - shift + tap: semicolon
      - ctrl + shift + tap: <

      From: https://zmk.dev/docs/behaviors/mod-morph#advanced-configuration
      */
      /omit-if-no-ref/ comma_morph: comma_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&comma_inner_morph>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      /omit-if-no-ref/ comma_inner_morph: comma_inner_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
      };

      /*
      - tap: dot
      - shift + tap: colon
      - ctrl + shift + tap: >

      From: https://zmk.dev/docs/behaviors/mod-morph#advanced-configuration
      */
      /omit-if-no-ref/ dot_morph: dot_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&dot_inner_morph>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      /omit-if-no-ref/ dot_inner_morph: dot_inner_morph {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp COLON>, <&kp GREATER_THAN>;
        mods = <(MOD_LGUI|MOD_RGUI)>;
      };

      /*
      - tap: (
      - shift + tap: <
      */
      /omit-if-no-ref/ lpar_lt: lpar_lt {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp LT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };
      /*
      - tap: )
      - shift + tap: >
      */
      /omit-if-no-ref/ rpar_gt: rpar_gt {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp GT>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      
      /*
      - tap: ?
      - shift + tap: !
      */
      /omit-if-no-ref/ qexcl: qexcl {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
      };

      /*
        - tab: undo
        - tab x2: redo
      */
      /omit-if-no-ref/ undo_redo: undo_redo {
        compatible = "zmk,behavior-tap-dance";
        tapping-term-ms = <TAPPING_TERM_MS>;
        #binding-cells = <0>;
        bindings = <&kp LG(Z)>, <&kp LS(LG(Z))>;
      };

      /*
        - tab: LANG change
        - tab x2: LGUI + LCTL + LSHIFT + N4
      */
      /omit-if-no-ref/ lang_screen: lang_screen {
        compatible = "zmk,behavior-tap-dance";
        tapping-term-ms = <TAPPING_TERM_MS>;
        #binding-cells = <0>;
        bindings = <&kp F19>, <&hmr FN LS(LC(LG(N4)))>;
      };
    };

    macros {
      /*
        Temporarily switches to a layer (&mo) while a modifier is held. This is
        an implementation of QMK's `LM()` using ZMK's parameterized macros.

        Params:
          1. Layer to switch to
          2. Modifier to press while layer is active

        Example:
          `&lm NUM LSHIFT`
      */
      /omit-if-no-ref/ lm: lm {
        wait-ms = <0>;
        tap-ms = <0>;
        compatible = "zmk,behavior-macro-two-param";
        bindings = <&macro_param_1to1>,
          <&macro_press &mo MACRO_PLACEHOLDER>,
          <&macro_param_2to1>,
          <&macro_press &kp MACRO_PLACEHOLDER>,
          <&macro_pause_for_release>,
          <&macro_param_2to1>,
          <&macro_release &kp MACRO_PLACEHOLDER>,
          <&macro_param_1to1>,
          <&macro_release &mo MACRO_PLACEHOLDER>;
      };

      /*
        Practically identical to &sl, except it triggers a `K_CANCEL` right before to clear
        any active smart layers. This prevents nested/stacked layer activation when needed.

        Params:
          1. Layer to switch to

        Example:
          `&csl NUM`
      */
      /omit-if-no-ref/ csl: clear_sl {
        wait-ms = <0>;
        tap-ms = <0>;
        compatible = "zmk,behavior-macro-one-param";
        bindings = <&macro_tap &kp K_CANCEL>,
          <&macro_param_1to1>,
          <&macro_press &sl MACRO_PLACEHOLDER>,
          <&macro_pause_for_release>,
          <&macro_param_1to1>,
          <&macro_release &sl MACRO_PLACEHOLDER>;
      };

      /*
        Practically identical to &mo, except it triggers a `K_CANCEL` right before to clear
        any active smart layers. This prevents nested/stacked layer activation when needed.
        It's also useful to maintain more consistent expectations when holding a cancel/exit layer
        key from a smart layer.

        Params:
          1. Layer to switch to

        Example:
          `&cmo NUM`
      */
      /omit-if-no-ref/ cmo: clear_mo {
        wait-ms = <0>;
        tap-ms = <0>;
        compatible = "zmk,behavior-macro-one-param";
        bindings = <&macro_tap &kp K_CANCEL>,
          <&macro_param_1to1>,
          <&macro_press &mo MACRO_PLACEHOLDER>,
          <&macro_pause_for_release>,
          <&macro_param_1to1>,
          <&macro_release &mo MACRO_PLACEHOLDER>;
      };

      // Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
      dot_spc: dot_spc {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        wait-ms = <0>;
        tap-ms = <5>;
      };
    };

    combos {
      compatible = "zmk,combos";

    // KEY POSITIONS
    // ╭──────────────────────────────╮              ╭─────╮      ╭──────────────────────────────╮
    // │ LT5  LT4  LT3  LT2  LT1  LT0 │          ╭───╯ JS0 ╰───╮  │ RT0  RT1  RT2  RT3  RT4  RT5 │
    // │ LM5  LM4  LM3  LM2  LM1  LM0 │ ╭─────╮  │ JS1 JS2 JS3 │  │ RM0  RM1  RM2  RM3  RM4  RM5 │
    // │ LB5  LB4  LB3  LB2  LB1  LB0 │ │ LEC │  ╰───╮ JS4 ╭───╯  │ RB0  RB1  RB2  RB3  RB4  RB5 │
    // ╰──────────────╮ LH2  LH1  LH0 │ ╰─────╯      ╰─────╯      │ RH0  RH1  RH2 ╭──────────────╯
    //                ╰───────────────╯                           ╰───────────────╯
    
      /* Horizontal combos - left hand */
      ZMK_COMBO(mouse, &smart_mouse,     LT2 LT1,     DEF NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(tab,   &hml LS(LGUI)TAB, LM3 LM2,     DEF NAV NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)

      ZMK_COMBO(cut,   &kp LG(X),    LB3 LB1,     DEF NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(copy,  &kp LG(C),    LB3 LB2,     DEF NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(paste, &kp LG(V),    LB2 LB1,     DEF NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      
      /* Horizontal combos - right hand */
      ZMK_COMBO(bslh,  &kp BSLH,     RT4 RT5,     DEF        , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(pipe,  &kp PIPE,     RM4 RM5,     DEF        , COMBO_TERM_FAST, COMBO_IDLE_FAST)

      ZMK_COMBO(lpar,  &lpar_lt,     RM1 RM2,     DEF     NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(LCTRL),    KEYS_L)
      ZMK_COMBO(rpar,  &rpar_gt,     RM2 RM3,     DEF     NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST, RS(LALT),     KEYS_L)COMBO(lt,    &kp LT,       RM1 RM2,         NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(gt,    &kp GT,       RM2 RM3,         NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)

      ZMK_COMBO(lbkt,  &kp LBKT,     RB1 RB2,     DEF     NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(rbkt,  &kp RBKT,     RB2 RB3,     DEF     NUM, COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(lbrc,  &kp LBRC,     RB1 RB2,         NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
      ZMK_COMBO(rbrc,  &kp RBRC,     RB2 RB3,         NAV    , COMBO_TERM_FAST, COMBO_IDLE_FAST)
    };

    conditional_layers {
      compatible = "zmk,conditional-layers";

      tri_layer_sys {
          if-layers = <NAV NUM>;
          then-layer = <SYS>;
      };
    };

    keymap {
      compatible = "zmk,keymap";

      base_layer {
        display-name = "Base";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &esc_grave    &kp Q         &kp W         &kp E         &kp R         &kp T                                           NAV_UP                         &kp Y         &kp U         &kp I         &kp O         &kp P         &hmr UNDER MINUS
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &undo_redo    &hml LCTL A   &hml LALT S   &hml LGUI D   &hml LSHFT F  &kp G                             NAV_LEFT      &kp RET       NAV_RIGHT        &kp H         &hmr RSHFT J  &hmr LGUI K   &hmr LALT L   &hmr LCTL SQT &hmr PLUS EQUAL
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    MAGIC_SHIFT   &kp Z         &kp X         &kp C         &kp V         &kp B            &kp RET                        NAV_DOWN                       &kp N         &kp M         &comma_morph  &dot_morph    &hmr EXCL QMARK MAGIC_SHIFT
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                              &hml LGUI ESC SMART_NUM     &lt_spc NAV 0                                                                  &lt FN RET    &bs_del       &lang_screen
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&scroll_encoder>;
      };

      nav_layer {
        display-name = "Nav";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           XXX           XXX           &kp LS(LG(TAB)) &swapper    XXX                                             ___                            XXX           XXX           NAV_UP        XXX           XXX           XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           XXX           &sk LCTL      &sk LALT     &sk LGUI       XXX                               ___           ___           ___              XXX           NAV_LEFT      NAV_DOWN      NAV_RIGHT     XXX           XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           XXX           XXX           XXX           XXX           XXX              ___                            ___                            XXX           XXX           XXX           XXX           XXX           ___
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___                                                                            ___           ___           CANCEL
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&scroll_encoder>;
      };

      fn_layer {
        display-name = "Fn";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           &kp F12       &kp F7        &kp F8        &kp F9        XXX                                             ___                            &kp LC(LG(F)) XXX           XXX           XXX           XXX           XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp F11       &hml LCTL F4  &hml LALT F5 &hml LGUI F6   XXX                               ___           ___           ___              XXX           WIN_LEFT      XXX           WIN_RIGHT     XXX           XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp F10       &kp F1        &kp F2        &kp F3        XXX              ___                            ___                            XXX           XXX           XXX           XXX           XXX           XXX
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX                                                                            &kp C_PP      &kp C_PREV    &kp C_NEXT 
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
      };

      num_layer {
        display-name = "Num";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           XXX           XXX           XXX           XXX                                             ___                            XXX           &kp N7        &kp N8        &kp N9        XXX           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           &kp LCTL      &kp LALT     &kp LGUI       &kp LSHFT     XXX                               ___           ___           ___              XXX           &hmr LCTL N4  &hmr RSHFT N5 &hmr LGUI N6  ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX              ___                            ___                            XXX           &kp N1        &kp N2        &kp N3        ___           ___
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┴─────────────┼─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___                                                                            ___           ___           CANCEL
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&scroll_encoder>;
      };

      sys_layer {
        display-name = "Sys";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                    XXX                            XXX           XXX           XXX           XXX           XXX           &out OUT_TOG
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           &rgb_ug RGB_EFF XXX                             XXX           XXX           XXX              XXX           XXX           XXX           XXX           XXX           XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bootloader   &sys_reset    XXX           XXX           &rgb_ug RGB_TOG XXX            XXX                            XXX                            XXX           XXX           XXX           XXX           &sys_reset    &bootloader
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___                                                                            ___           ___           CANCEL
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&rgb_encoder>;
      };

      mouse_layer {
        display-name = "Mouse";
        bindings = <
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           U_WH_U        ___                                             U_MS_U                         ___           U_MS_U        ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           U_WH_L        U_WH_D        U_WH_R                            U_MS_L        &mkp LCLK     U_MS_R           U_MS_L        U_MS_D        U_MS_R        ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭─────────────╮  ╰─────────────┼─────────────┼─────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           &mkp LCLK     &mkp MCLK     &mkp RCLK        ___                            U_MS_D                         &mkp LCLK     &mkp MCLK     &mkp RCLK     ___           ___           ___
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤  ╰─────────────╯                ╰─────────────╯                ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                              ___           ___           ___                                                                            ___           ___           CANCEL
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯                                          ╰─────────────┴─────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯
        >;
        sensor-bindings = <&scroll_encoder>;
      };

    };
  };
